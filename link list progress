class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
class ringStack:
    def __init__(self):
        self.head = None
        self.rings_taken = set()
    
    def is_empty(self):
        return self.head is None
    
    def push(self, data):
        new_node = Node(data)
        new_node.next = self.head
        self.head = new_node
    
    def pop(self):
        if self.is_empty():
            print("stack is empty")
            return None
        popped_data = self.head.data
        self.head = self.head.next
        return popped_data

def red():
    ("\033[1;31;40m (|||||||||||||)")
def yellow():
    ("\033[1;33;40m  (|||||||||||)")
def green(): 
    ("\033[1;32;40m   (|||||||||)")
def blue(): 
    ("\033[1;34;40m    (|||||||)")
def purple():
    ("\033[1;35;40m     (|||||)")

def printBase():
    print("\033[0;0;0m       |=|")
    pass
stack = ringStack()
def main():
    z = 6
    b = 0
    print("What would you like to do? (add rings or take them off?)")
    pickList = ["add", "take"]
    outList = []
    pick = str(input())
    if (int(pickList.index(pick)) == 0):
        y = 0
    if (int(pickList.index(pick)) == 1):
        pass
    while (y == 0):
        print("What color would you like to add? (red, yellow, green, blue, purple)")
        colors = ["red", "yellow", "green", "blue", "purple"]
        list = [red, yellow, green, blue, purple]
        playPick = str(input())
        player = int(colors.index(playPick))
        while (b != z):
            printBase()
            b = b + 1
        newInfo = list.pop(player)
        stack.push(newInfo)
        outList.insert(0, newInfo)
        for y in range(len(outList)):
            outList[y]()
        b = 0
        z = z - 1
main()
